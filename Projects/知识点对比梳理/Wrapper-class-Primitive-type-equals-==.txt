package com.frankie.demo;

import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.junit4.SpringRunner;

import java.math.BigDecimal;
import java.util.UUID;

@RunWith(SpringRunner.class)
@SpringBootTest
public class DemoApplicationTests {

    @Test
    public void primitiveTypeSizeTest() {
        /*
            1 byte: byte, boolean
            2 byte: short, char
            4 byte: int, float
            8 byte: long, double
        */

        int byteSize = Byte.SIZE / 8; // 1
        int shortSize = Short.SIZE / 8; // 2
        int characterSize = Character.SIZE / 8; // 2
        int integerSize = Integer.SIZE / 8; // 4
        int floatSize = Float.SIZE / 8; // 4
        int longSize = Long.SIZE / 8; // 8
        int doubleSize = Double.SIZE / 8; // 8
    }

    /**
     * 包装类型比较总结:
     * 1. 变量之间的比较，推荐使用equals().
     * Short s1 = 2;
     * Short s2 = 2;
     * boolean b1 = s1 == s2;    // false, s1,s2分别代表两个不同的引用。
     *
     * 2. 变量与字面量之间的比较，推荐使用等号。
     * boolean b2 = s1.equals(2) // false, equals()认为输入的2是一个Integer类型的数值。
     *
     */
    @Test
    public void wrapperClassEqualSign(){


        // 1 byte. Byte
        Byte b1 = 127;
        Byte b2 = 127;
        Byte b3 = 123;

        boolean byte1 = b1 == b2;       // true
        boolean byte2 = b1 == b3;       // false
        boolean byte3 = b1.equals(b2);  // true
        boolean byte4 = b1.equals(b3);  // false
        boolean byte5 = b1 == 127;      // true
        // equals(obj), 它认为127是Integer类型，所以返回false.
        boolean byte6 = b1.equals(127); // false


        // 2 byte. Char
        Character c1 = 'y';
        Character c2 = 'y';
        Character c3 = 'c';

        boolean char1 = c1 == c2;        // true
        boolean char2 = c1 == c3;        // false
        boolean char3 = c1.equals(c2);   // true
        boolean char4 = c1.equals(c3);   // false

        // 2 byte. Short
        Short s1 = 32767;
        Short s2 = 32767;
        Short s3 = 32000;

        /**
         * s1 == s2 为false的原因是因为比较的是s1和s2的引用，而s1和s2指向不同的引用。
         */
        boolean short1 = s1 == s2;       // false
        boolean short2 = s1 == s3;       // false
        boolean short3 = s1.equals(s2);  // true
        boolean short4 = s1.equals(s3);  // false
        boolean short5 = s1 == 32767;    // true
        /**
         * 注意点: s1.equals(32767): equals方法会将32767(obj)作为一个Integer,它认为obj不是Short,所以返回false.
         */
        boolean short6 = s1.equals(32767); //false

        // 4 byte. Integer
        Integer i1 = 10086;
        Integer i2 = 10086;
        Integer i3 = 10000;

        boolean integer1 = i1 == i2;     // false
        boolean integer2 = i1 == i3;
        boolean integer3 = i1.equals(i2);
        boolean integer4 = i1.equals(i3);
        boolean integer5 = i1 == 10086;
        boolean integer6 = i1.equals(10086);


        // 4 byte. Float
        Float f1 = 20132.20132f;
        Float f2 = 20132.20132f;
        Float f3 = 20132.22222f;

        boolean float1 = f1 == f2; // false
        boolean float2 = f1 == f3;
        boolean float3 = f1.equals(f2);
        boolean float4 = f1.equals(f3);
        boolean float5 = f1 == 20132.20132f;
        boolean float6 = f1.equals(20132.20132f);


        // 8 byte. Long
        Long l1 = 1111122222l;
        Long l2 = 1111122222l;
        Long l3 = 1111133333l;

        boolean long1 = l1 == l2; // false
        boolean long2 = l1 == l3;
        boolean long3 = l1.equals(l2);
        boolean long4 = l1.equals(l3);
        boolean long5 = l1 == 1111122222l;
        boolean long6 = l1.equals(1111122222l);

        // 8 byte. Double
        Double d1 = 1111122222.333;
        Double d2 = 1111122222.333;
        Double d3 = 1111122222.888;

        boolean double1 = d1 == d2; // false
        boolean double2 = d1 == d3;
        boolean double3 = d1.equals(d2);
        boolean double4 = d1.equals(d3);
        boolean double5 = d1 == 1111122222.333;
        boolean double6 = d1.equals(1111122222.333);


    }

    /**
     * 基元类型比较总结:
     * 1. 无论是变量之间，还是变量与字面量之间的比较，只要值一样，均为true.
     */
    @Test
    public void primitiveTypeEqualTest(){
        byte b1 = 2;
        byte b2 = 2;
        boolean b100 = b1 == b2;
        boolean b101 = b1 == 2;

        short s1 = 2;
        short s2 = 2;
        boolean b103 = s1 == s2;
        boolean b104 = s1 == 2;

        int i1 = 3;
        int i2 = 3;
        boolean b105 = i1 == i2;
        boolean b106 = i1 == 3;

        long l1 = 7l;
        long l2 = 7l;
        boolean b107 = l1 == l2;
        boolean b108 = l1 == 7l;

        float f1 = 10.2f;
        float f2 = 10.2f;
        boolean b109 = f1 == f2;
        boolean b110 = f1 == 10.2f;

        double d1 = 5.2;
        double d2 = 5.2;
        boolean b111 = d1 == d2;
        boolean b112 = d1 == 5.2;
    }
}
