// region String
/**
 * 字符串的排列。
 * 1. 递归结束条件: start等于end，拼buf，加入list即可。
 * 2. 否则调整数组、递归(start+1)、还原数组。
 */
private ArrayList<String> permutationList = new ArrayList<>();
public List<String> permutation(char[] buf, int start, int end){

	if (start == end){
		StringBuilder sb = new StringBuilder();
		for (int i = 0; i < end; i++){
			sb.append(buf[i]);
		}
		permutationList.add(new String(sb));
	} else {
		for (int i = start; i < buf.length; i++){
			// 排列
			ArrayUtils.swap(buf, i, start);
			permutation(buf, start + 1, end);
			// 还原
			ArrayUtils.swap(buf, i, start);
		}
	}
	return permutationList;
}

/**
 * 组合算法：[abc]的组合方式有[a,b,c,ab,bc,ac,abc]六种组合方式
 */
public List<String> combination(char[] buf){
	ArrayList<String> list = new ArrayList<>();
	// 1 << buf.length，即2的buf.length次方。
	for(int i = 1 ; i < (1 << buf.length); i++){
		StringBuilder sb = new StringBuilder();
		for(int j = 0 ; j < buf.length; j++){
			//判断哪一位为1
			if((i & (1 << j)) != 0){
				sb.append(buf[j]);
			}
		}
		list.add(new String(sb));
	}
	return list;
}