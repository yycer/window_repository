/**
 * 在排序数组中查找数字。
 * 1. 二分法计算有序数组中k出现的次数。
 */
public int countK(int[] a, int k){
	int start = 0;
	int end   = a.length - 1;
	int firstKIndex = getFirstK(a, start, end, k);
	int lastKIndex  = getLastK(a, start, end, k);
	if (firstKIndex == -1 && lastKIndex == -1){
		return 0;
	}
	return lastKIndex - firstKIndex + 1;
}

// 从有序数组中获得第一个k的索引。
public int getFirstK(int[] a, int start, int end, int k){
	if (a.length < 1 || start > end) {
		return -1;
	}

	int mid = (start + end) >> 1;
	// 若当前元素为k，首先判断是否为首元素，若不是，接着判断当前元素的前一个元素是否为k，若也不是，往前找。
	if (a[mid] == k){
		if ((mid > 0 && a[mid - 1] != k) || mid == 0){
			return mid;
		} else {
			end = mid - 1;
		}
	}
	// 若当前元素小于k，说明k出现在后面。
	else if (a[mid] < k){
		start = mid + 1;
	}
	// 若当前元素大于k，说明k出现在前面。
	else {
		end   = mid - 1;
	}
	return getFirstK(a, start, end, k);
}

// 从有序数组中获得最后一个k的索引。
public int getLastK(int[] a, int start, int end, int k){
	if (a.length < 1 || start > end){
		return -1;
	}

	int mid = (start + end) >> 1;
	if (a[mid] == k){
		if ((mid > 0 && a[mid + 1] != k) || mid == a.length - 1) {
			return mid;
		} else{
			start = mid + 1;
		}
	}
	else if (a[mid] < k){
		start = mid + 1;
	}
	else{
		end   = mid - 1;
	}
	return getLastK(a, start, end, k);
}