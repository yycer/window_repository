/**
 * 查找o~n-1缺失数字（循环法）。
 */
public int getMissingNumberUsingLoop(int[] a, int s, int e){
	if (a.length < 1){
		return -1;
	}

	while (s <= e){
		int mid = (s + e) >> 1;
		// 因为是递增数组，若中间元素值与索引相等，向后考虑。
		if (a[mid] == mid){
			s = mid + 1;
		}
		// 若当前元素为首元素、且与索引不等，或者当前元素值与索引值不等、且前一个值相等。
		else if (mid == 0 || a[mid - 1] == mid - 1){
			return mid;
		}
		// 前一个元素也不等，那就要往前考虑。
		else {
			e = mid - 1;
		}
	}
	return -1;
}

/**
 * 在排序数组中查找数字。
 * 2. 获得长度为n-1的递增排序数组中的缺失数字(递归法、二分)。
 * <1> 缺失的数字位于数组的开始、中间。
 */
public int getMissingNumberIndexWay(int[] a, int start, int end){
	if (a.length <= 0 || start > end) {
		return -1;
	}

	int mid = (start + end) >> 1;

	if (a[mid] == mid){
		return getMissingNumberIndexWay(a, mid + 1, end);
	}
	// 终结条件: mid元素与索引mid不定，但是前一个元素相等。
	else if (mid == 0 || (a[mid - 1] == mid - 1)){
		return mid;
	}
	else {
		return getMissingNumberIndexWay(a, start, mid - 1);
	}
}