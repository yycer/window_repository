/**
 * 从旋转数组中查找最小值, eg: {3, 4, 5, 1, 2}
 */
public int minNumberInRotatedArray(int[] a){

	// Step1: Base check.
	if (a.length <= 0) {
		return -1;
	}

	int l  = 0;
	int r = a.length - 1;
	// 跳出循环的标志就是low == high。
	while (l < r){
		int mid = (l + r) >> 1;
		// Step2: 若数组中间值比尾元素大，说明最小值在右边。
		if (a[mid] > a[r]){
			l = mid + 1;
		}
		// Step3: 若数组中间值比尾元素小，说明最小值在左边。
		else if (a[mid] < a[r]){
			r = mid;
		}
		// Step4: eg. {1, 0, 1, 1, 1}
		else {
			r--;
		}
	}
	return a[l];
}

/**
 * 找出数组中重复的数字。
 * 1. 在一个长度为n的数组中，所有数字都在0~n-1范围内，请找出数组中重复的数字。
 */
public static boolean isDuplicated(int[] a) {

	int length = a.length;
	if (length == 0) {
		return false;
	}

	/**
	 * 数组元素限制(0 ~ n-1)。
	 */
	for (int i: a){
		if (i < 0 || i > length - 1){
			return false;
		}
	}

	for (int i = 0; i < length; i++) {
		while (i != a[i]) {
			if (a[i] == a[a[i]]) {
				return true;
			}
			SortUtils.swap(a, i, a[i]);
		}
	}
	return false;
}
