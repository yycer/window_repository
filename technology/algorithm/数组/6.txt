/**
 * 找出数组中出现次数超过一半的数字。
 * 1. 判断数组是否有效。
 * 2. 次数法，次数数量需要大于0，返回结果。
 * 3. 验证该结果在数组中出现的次数是否大于一半。
 */
public int moreThanHalfNumber(int[] a) throws Exception {
	// Step1: 判断数组是否有效。
	if (a.length <= 0){
		throw new Exception("The array is invalid!");
	}

	// Step2: 次数法，次数数量需要大于0，返回结果。
	int result = a[0];
	int times  = 1;
	for (int i = 1; i < a.length; i++){
		if (times == 0){
			result = a[i];
			times  = 1;
		}
		else if (a[i] == result){
			times++;
		}
		else {
			times--;
		}
	}

	// Step3: 验证该结果在数组中出现的次数是否大于一半。
	int resultCount = 0;
	for (int i: a){
		if (i == result) {
			resultCount++;
		}
	}
	if (resultCount * 2 > a.length) {
		return result;
	} else {
		throw new Exception("The array is invalid!");
	}
}

/**
 * 调整数组顺序，使奇数位于偶数前面。
 */
public int[] reorderOddEven(int[] nums){
	if (nums.length <= 1) {
		return nums;
	}

	// 第一个偶数的索引。
	int firstEvenIndex  = 0;

	for (int i = 0; i < nums.length; i++){
		if (hitCondition(nums, i)){
			ArrayUtils.swap(nums, i, firstEvenIndex);
			firstEvenIndex++;
		}
	}
	return nums;
}