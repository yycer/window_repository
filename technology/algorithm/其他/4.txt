/**
 * 判断是否为丑数(只能整除2、3、5的数，习惯上我们把1当做第一个丑数)。
 */
public boolean isUgly(int x){

	while (x % 2 == 0){
		x /= 2;
	}
	while (x % 3 == 0){
		x /= 3;
	}
	while (x % 5 == 0){
		x /= 5;
	}

	return x == 1;
}

/**
 * 求第n个丑数(原始方法)
 */
public int getUglyNumberByIndex1(int index){

	int count  = 0;
	int curNum = 0;

	while (count < index){
		curNum++;
		if (isUgly(curNum)){
			count++;
		}
	}
	return curNum;
}

/**
 * 第一个只出现一次的字符(维护一个hashMap，以空间换时间，O(n^2) -> O(n))
 */
public char firstNotRepeatingChar(String s) throws Exception {
	if (s.length() <= 0){
		throw new Exception("The input is invalid");
	}

	Map<Character, Integer> map = new HashMap<>();
	char[] chars = s.toCharArray();
	for (char c: chars){
		if (!map.containsKey(c)){
			map.put(c, 1);
		} else {
			map.put(c, map.get(c) + 1);
		}
	}

	for (char c: chars){
		if (map.get(c) == 1){
			return c;
		}
	}
	throw new Exception("Failed to find not repeating char from s");
}
