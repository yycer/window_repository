/**
 * 计算二进制中1的个数。
 */
public int numberOfOne(int x){
	int count = 0;
	while (x != 0){
		x = x & (x - 1);
		count++;
	}
	return count;
}

// 查询数组中仅出现一次的数字。
public int findNumberAppearingOnce(int[] nums){
	int result = 0;
	for (int i: nums){
		result = result ^ i;
	}
	return result;
}

/**
 * 数组中数字出现的次数。
 * 2. 查询数组中出现二次的数字。
 */
public ArrayList<Integer> findTwoNumberAppearingOnce(int[] nums){

	// Base check.
	if (nums.length < 1) {
		return null;
	}

	// Step1: 依次遍历数组，进行异或操作。
	int xor = 0;
	for (int i: nums){
		xor = xor ^ i;
	}

	// Step2: 定位异或结果中最低位为1的位置。
	int position =  0;
	while ((xor & 1) == 0){
		xor >>= 1;
		position++;
	}

	// Step3: 根据异或结果的第一位1的位置，虚拟地分为两个集合(因为遍历次数仍为1)，然后依次做异或。
	int x = 0, y = 0;
	ArrayList<Integer> result = new ArrayList<>();
	for (int i: nums){
		if (((i >> position) & 1) == 0) {
			x ^= i;
		} else {
			y ^= i;
		}
	}
	result.add(x);
	result.add(y);

	return result;
}