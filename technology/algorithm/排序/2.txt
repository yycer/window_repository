/**
 * 插入排序(不能影响第一重遍历中的i)。
 */
public static int[] insertionSort(int[] a){
	int length = a.length;
	if (length < 1){
		return null;
	}

	for (int i = 1; i < length; i++){
		int j = i - 1;
		while (j >= 0){
			if (a[j + 1] < a[j]){
				SortUtils.swap(a, j, j + 1);
			}
			j--;
		}
	}
	return  a;
}

/**
 * 插入排序优化版
 */
public static int[] insertionOptimization(int[] a){
	int length = a.length;
	if (length < 1){
		return null;
	}

	for (int i = 1; i < length; i++){
		for (int j = i; j > 0 && SortUtils.less(a[j], a[j - 1]); j--){
			SortUtils.swap(a, j, j - 1);
		}
	}
	return a;
}

/**
 * 希尔排序(关键是gap)。
 */
public static int[] shellSort(int[] a){
	int length = a.length;
	if (length < 1){
		return null;
	}

	int gap = length >> 1;
	while (gap >= 1){
		for (int i = gap; i < length; i++){
			for (int j = i; j >= gap && SortUtils.less(a[j], a[j - gap]); j -= gap){
				SortUtils.swap(a, j, j - gap);
			}
		}
		gap >>= 1;
	}
	return a;
}