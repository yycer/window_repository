public int fibonacci(int n){
	if (n <= 0) return 0;
	if (n == 1) return 1;

	return fibonacci(n-1) + fibonacci(n - 2);
}

/**
 * @param n: 代表第几位fibonacci。
 */
public int fibonacciOptimization(int n){
	if (n == 0) return 0;
	if (n == 1) return 1;

	int nMinustwo = 0;
	int nMinusOne = 1;
	int result    = 0;

	for (int i = 2; i < n; i++){
		result    = nMinusOne + nMinustwo;
		nMinustwo = nMinusOne;
		nMinusOne = result;
	}
	return result;
}

/**
 * 先序遍历(递归法)
 */
public void preOrderTraversalUsingRecursive(Node node){
	if (node == null) return;

	System.out.print(node.getVal() + " ");
	preOrderTraversalUsingRecursive(node.getLeftNode());
	preOrderTraversalUsingRecursive(node.getRightNode());
}

/**
 * 中序遍历(递归法)
 */
public void inOrderTraversalUsingRecursive(Node node){
	if (node == null) return;

	inOrderTraversalUsingRecursive(node.getLeftNode());
	System.out.print(node.getVal() + " ");
	inOrderTraversalUsingRecursive(node.getRightNode());
}

/**
 * 后序遍历(递归法)
 */
public void postOrderTraversalUsingRecursive(Node node){
	if (node == null) return;

	postOrderTraversalUsingRecursive(node.getLeftNode());
	postOrderTraversalUsingRecursive(node.getRightNode());
	System.out.print(node.getVal() + " ");
}