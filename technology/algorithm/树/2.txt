/**
 * 中序遍历(循环法、栈方式)
 * 1. 先将所有左子树压入栈中。
 * 2. 出栈、定位到右子树。
 */
public void inOrderTraversal(Node node){
	if (node == null) return;
	ArrayDeque<Node> deque = new ArrayDeque<>();
	System.out.println("中序遍历: ");

	while (node != null || deque.size() > 0){
		// Step1: 先将所有左子树压入栈中。
		while (node != null){
			deque.push(node);
			node = node.getLeftNode();
		}

		if (deque.size() > 0){
			// Step2: 出栈、定位到右子树。
			// 执行下一个语句前，node为null，需要回溯到上一个叶子节点！
			node = deque.pop();
			System.out.print(node.getVal() + " ");
			node = node.getRightNode();
		}
	}
}

/**
 * 后续遍历(循环法、双栈方式)
 * 1. 先将右子树压入节点栈中
 * 2. 出栈、定位到左子树。
 * 3. 打印后续遍历
 */
public void postOrderTraversal2(Node node){
	if (node == null) return;
	ArrayDeque<Node>    nodeDeque  = new ArrayDeque<>();
	ArrayDeque<Integer> valueDeque = new ArrayDeque<>();

	while (node != null || nodeDeque.size() > 0){
		// Step1: 先将右子树压入节点栈中
		while (node != null){
			nodeDeque.push(node);
			valueDeque.push(node.getVal());
			node = node.getRightNode();
		}

		// Step2: 出栈、定位到左子树。
		// 执行下一个语句前，node为null，需要回溯到上一个叶子节点！
		node = nodeDeque.pop();
		node = node.getLeftNode();
	}

	System.out.println("后续遍历: ");
	// Step3: 打印后续遍历
	while (!valueDeque.isEmpty()){
		System.out.print(valueDeque.pop() + " ");
	}
}