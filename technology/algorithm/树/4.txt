/**
 * 广度优先遍历(队列)
 */
public void levelOrderTraserval2(Node node){
	if (node == null) return;
	ArrayDeque<Node> deque = new ArrayDeque<>();
	deque.addLast(node);
	System.out.println("广度优先遍历: ");

	while (!deque.isEmpty()){
		// 重点！不能创建一个新的变量喔，否则会造成node永远为根节点，进一步导致死循环！！！
		node = deque.removeFirst();
		System.out.print(node.getVal() + " ");

		if (node.getLeftNode()  != null){
			deque.addLast(node.getLeftNode());
		}

		if (node.getRightNode() != null){
			deque.addLast(node.getRightNode());
		}
	}
}

/**
 * 删除树中节点。
 * 1. 删除的为叶子节点   => null
 * 2. 删除的包含一个节点 => 直接拿其子节点顶替。
 * 3. 删除的包含两个节点 => 找右子树中最小的顶替。
 * @param val: 待删除节点的值。
 */
public Node deleteNode(Node node, int val){
	// Step0: Base check.
	if (node == null) return null;

	// Step1: 定位待删除元素。
	if      (node.getVal() > val){
		node.setLeftNode(deleteNode(node.getLeftNode(), val));
	}
	else if (node.getVal() < val){
		node.setRightNode(deleteNode(node.getRightNode(), val));
	}
	else {
		// Step2: 三种情况。
		// 情况1: 删除的包含两个节点。
		if (node.getLeftNode() != null && node.getRightNode() != null){
			Node tmpNode = node;
			Node minNodeForRight = minElementInRight(tmpNode.getRightNode());
			node.setVal(minNodeForRight.getVal());
			node.setRightNode(deleteNode(node.getRightNode(), minNodeForRight.getVal()));
		}
		// 情况2.1: 删除的包含一个节点(左)
		else if (node.getLeftNode() != null){
			node = node.getLeftNode();
		}
		// 情况2.2: 删除的包含一个节点(右)
		else if (node.getRightNode() != null){
			node = node.getRightNode();
		}
		// 删除的为叶子节点
		else{
			node = null;
		}
	}
	return node;
}