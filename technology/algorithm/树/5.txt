/**
 * 判断树1是否包含树2。
 */
public boolean hasSubtree(Node root1, Node root2){
	boolean result = false;
	if (root1 != null && root2 != null){
		// 从树1定位与树2根节点一致的子树。
		if (root1.getVal() == root2.getVal()) result = doesTree1HasTree2(root1, root2);
		if (!result)                          result = hasSubtree(root1.getLeftNode(), root2);
		if (!result)                          result = hasSubtree(root1.getRightNode(), root2);
	}
	return result;
}

/**
 * 判断子树1是否包含子树2。
 * 1. 不包含的情况
 * <1> tree1 == null
 * <2> 树1、2当前节点的值不相等。
 */
public boolean doesTree1HasTree2(Node n1, Node n2){
	// line1在line2之上的原因是，母树除了包含子树外，还可能会有些节点延伸。
	if (n2 == null) return true;  // line1

	// 子树怎么可能比母树大叻
	if (n1 == null) return false; // line2
	if (n1.getVal() != n2.getVal()) return false;

	return doesTree1HasTree2(n1.getLeftNode(), n2.getLeftNode()) &&
		   doesTree1HasTree2(n1.getRightNode(), n2.getRightNode());
}


/**
 * 返回二叉树的下一个节点
 * 1. 若该节点包含右节点，取其右子树中最小值(most leftNode)
 * 2. 若该节点为父节点的左子树，返回父节点。
 * 3. 若该节点为父节点的右子树，一路向上遍历，直至找到一个其父节点为左子树的节点，返回其爷爷节点。
 */
public Node returnNextNode(Node curNode){
	if (curNode == null) return null;

	// Step1: 该节点包含右节点，取其右子树中最小值(最左左叶子节点)
	if (curNode.getRightNode() != null){
		Node rightNode = curNode.getRightNode();
		while (rightNode.getLeftNode() != null){
			rightNode = rightNode.getLeftNode();
		}
		return rightNode;
	}

	/**
	 * 结合了2、3两种情况
	 * 2. 如果该节点为父节点的左节点，就直接返回其父节点。
	 * 3. 如果该节点为父节点的右节点，一直往上遍历，直至发现它的父节点是爷爷节点的左节点，返回爷爷节点。
	 */
	while (curNode.getParentNode() != null){
		if (curNode.getParentNode().getLeftNode() == curNode) return curNode.getParentNode();
		curNode = curNode.getParentNode();
	}

	return null;
}